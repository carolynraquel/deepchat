package com.example.deepchat.ui

import android.media.MediaPlayer
import android.media.MediaRecorder
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Mic
import androidx.compose.material.icons.filled.Send
import androidx.compose.material.icons.rounded.ExitToApp
import androidx.compose.material3.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.*
import java.io.File
import java.io.IOException
import java.util.*

data class ChatMessage(
    val text: String,
    val isUser: Boolean,
    val audioUrl: String? = null,
    val timestamp: Long = System.currentTimeMillis()
)

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ChatScreen(onSignOut: () -> Unit) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val audioFile = remember { File(context.cacheDir, "audio_record.3gp") }

    var messages by remember { mutableStateOf(listOf<ChatMessage>()) }
    var textInput by remember { mutableStateOf("") }
    var isRecording by remember { mutableStateOf(false) }
    var isProcessing by remember { mutableStateOf(false) }

    // Media recorder and player
    val recorder = remember { MediaRecorder() }
    val player = remember { MediaPlayer() }

    // For handling lifecycle
    DisposableEffect(Unit) {
        onDispose {
            try {
                player.release()
                recorder.release()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    // Functions for audio handling
    val startRecording = {
        try {
            recorder.apply {
                setAudioSource(MediaRecorder.AudioSource.MIC)
                setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP)
                setOutputFile(audioFile.absolutePath)
                setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB)
                prepare()
                start()
            }
            isRecording = true
            true
        } catch (e: IOException) {
            e.printStackTrace()
            false
        }
    }

    val stopRecording = {
        if (isRecording) {
            try {
                recorder.stop()
                recorder.reset()
                isRecording = false
                true
            } catch (e: Exception) {
                e.printStackTrace()
                false
            }
        } else false
    }

    // Mock simulation of sending to ElevenLabs and getting response
    // This would be replaced with your actual API call
    val processVoiceInput = {
        if (stopRecording()) {
            isProcessing = true

            // Simulate API call delay
            scope.launch {
                delay(1500) // Simulate network delay

                // Add user message (would normally be transcribed text from ElevenLabs)
                val userMessage = ChatMessage(
                    text = "This is a simulated voice message from the user",
                    isUser = true
                )
                messages = messages + userMessage

                delay(1000) // Simulate processing time

                // Add AI response
                val aiResponse = ChatMessage(
                    text = "This is a simulated response from ElevenLabs AI. In a real implementation, this would be generated by your AI agent based on your voice input.",
                    isUser = false,
                    audioUrl = "dummy_url" // replaced with actual audio URL

                )
                messages = messages + aiResponse

                isProcessing = false
            }
        }
    }

    val sendTextMessage = {
        if (textInput.isNotBlank()) {
            // Add user message
            val userMessage = ChatMessage(
                text = textInput,
                isUser = true
            )
            messages = messages + userMessage
            textInput = ""

            isProcessing = true

            // Simulate API call
            scope.launch {
                delay(1000) // Simulate network delay

                // Add AI response
                val aiResponse = ChatMessage(
                    text = "This is a simulated response from ElevenLabs AI based on your text input: \"${userMessage.text}\"",
                    isUser = false,
                    audioUrl = "dummy_URL"
                )
                messages = messages + aiResponse

                isProcessing = false
            }
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("DeepChat with ElevenLabs") },
                actions = {
                    IconButton(onClick = onSignOut) {
                        Icon(
                            imageVector = Icons.Rounded.ExitToApp,
                            contentDescription = "Sign Out"
                        )
                    }
                }
            )
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // Messages list
            LazyColumn(
                modifier = Modifier
                    .weight(1f)
                    .fillMaxWidth()
                    .padding(16.dp),
                reverseLayout = true
            ) {
                items(messages.reversed()) { message ->
                    MessageBubble(
                        message = message,
                        modifier = Modifier.padding(vertical = 4.dp)
                    )
                }

                if (messages.isEmpty()) {
                    item {
                        Box(
                            modifier = Modifier.fillParentMaxSize(),
                            contentAlignment = Alignment.Center
                        ) {
                            Text(
                                text = "Start a conversation with ElevenLabs AI",
                                style = MaterialTheme.typography.bodyLarge,
                                textAlign = TextAlign.Center,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
            }

            // Input area
            Surface(
                modifier = Modifier.fillMaxWidth(),
                shadowElevation = 8.dp
            ) {
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    OutlinedTextField(
                        value = textInput,
                        onValueChange = { textInput = it },
                        placeholder = { Text("Type a message") },
                        modifier = Modifier.weight(1f),
                        enabled = !isProcessing
                    )

                    Spacer(modifier = Modifier.width(8.dp))

                    // Text send button
                    IconButton(
                        onClick = { sendTextMessage() },
                        enabled = textInput.isNotBlank() && !isProcessing
                    ) {
                        Icon(
                            imageVector = Icons.Default.Send,
                            contentDescription = "Send"
                        )
                    }

                    // Voice record button
                    IconButton(
                        onClick = {
                            if (isRecording) {
                                processVoiceInput()
                            } else {
                                startRecording()
                            }
                        },
                        enabled = !isProcessing,
                        modifier = Modifier
                            .padding(4.dp)
                            .size(48.dp)
                            .background(
                                if (isRecording) Color.Red else MaterialTheme.colorScheme.primary,
                                CircleShape
                            )
                    ) {
                        Icon(
                            imageVector = Icons.Default.Mic,
                            contentDescription = if (isRecording) "Stop Recording" else "Start Recording",
                            tint = Color.White
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun MessageBubble(message: ChatMessage, modifier: Modifier = Modifier) {
    Column(
        modifier = modifier.fillMaxWidth(),
        horizontalAlignment = if (message.isUser) Alignment.End else Alignment.Start
    ) {
        Box(
            modifier = Modifier
                .clip(
                    RoundedCornerShape(
                        topStart = 16.dp,
                        topEnd = 16.dp,
                        bottomStart = if (message.isUser) 16.dp else 0.dp,
                        bottomEnd = if (message.isUser) 0.dp else 16.dp
                    )
                )
                .background(
                    if (message.isUser) MaterialTheme.colorScheme.primary
                    else MaterialTheme.colorScheme.secondaryContainer
                )
                .padding(16.dp)
        ) {
            Text(
                text = message.text,
                color = if (message.isUser) MaterialTheme.colorScheme.onPrimary
                else MaterialTheme.colorScheme.onSecondaryContainer
            )
        }

        // Would add audio playback controls if this was a real implementation
        message.audioUrl?.let {
            // In a real app, this would be a button to play the audio
            TextButton(
                onClick = { /* Play audio logic */ },
                modifier = Modifier.align(if (message.isUser) Alignment.End else Alignment.Start)
            ) {
                Text("Play Audio")
            }
        }
    }
}